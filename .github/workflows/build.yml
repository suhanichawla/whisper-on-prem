name: Build Professional Installers

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x86_64
            python-version: '3.9'
          - os: windows-latest
            platform: windows-AMD64
            python-version: '3.9'
          - os: macos-latest
            platform: darwin-arm64
            python-version: '3.9'
          - os: macos-13  # Intel Mac
            platform: darwin-x86_64
            python-version: '3.9'

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio wget
        # For .deb package creation
        sudo apt-get install -y dpkg-dev

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install NSIS for Windows installer creation
        choco install nsis -y
        # Add NSIS to PATH
        echo "C:\Program Files (x86)\NSIS" >> $GITHUB_PATH

    - name: Install system dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install portaudio

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --index-url https://pypi.org/simple/ --trusted-host pypi.org pyinstaller
        pip install -r requirements.txt

    - name: Build executables
      run: python build_executables.py

    - name: Build Windows installer
      if: matrix.os == 'windows-latest'
      run: |
        # Ensure directories exist (PowerShell compatible)
        if (-not (Test-Path "installers\windows")) { New-Item -ItemType Directory -Path "installers\windows" -Force }
        python build_installers.py

    - name: Build macOS installer
      if: startsWith(matrix.os, 'macos')
      run: |
        chmod +x installers/macos/create_dmg.sh
        python build_installers.py

    - name: Build Linux installer
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x installers/linux/create_appimage.sh
        python build_installers.py

    - name: List distribution files (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path "distributions") {
          Write-Host "Distribution files:"
          Get-ChildItem -Path distributions -Recurse
        } else {
          Write-Host "No distributions folder"
        }

    - name: List distribution files (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ -d "distributions" ]; then
          echo "Distribution files:"
          ls -la distributions/
        else
          echo "No distributions folder"
        fi

    - name: Upload Windows installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: WhisperSpeechApp-Setup-Windows
        path: distributions/WhisperSpeechApp-Setup.exe
        if-no-files-found: error

    - name: Upload macOS installer
      if: startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v4
      with:
        name: WhisperSpeechApp-${{ matrix.platform }}-DMG
        path: distributions/*.dmg
        if-no-files-found: error

    - name: Upload Linux installers
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: WhisperSpeechApp-Linux-Packages
        path: |
          distributions/*.AppImage
          distributions/*.deb
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts/ -type f || echo "No files in artifacts"
        ls -la artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release-assets

        # Copy all installer files
        find artifacts/ -name "*.exe" -exec cp {} release-assets/ \;
        find artifacts/ -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts/ -name "*.AppImage" -exec cp {} release-assets/ \;
        find artifacts/ -name "*.deb" -exec cp {} release-assets/ \;

        echo "Release assets:"
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## üéâ Professional Installers for Whisper Speech App

          ### üöÄ Easy Installation - No Technical Knowledge Required!

          **Windows Users:** Download and run `WhisperSpeechApp-Setup.exe`
          - Double-click to install
          - Creates Start Menu shortcuts
          - Installs to Program Files
          - Includes uninstaller

          **macOS Users:** Download the `.dmg` file
          - Double-click to mount
          - Drag app to Applications folder
          - Launch from Applications or Spotlight

          **Linux Users:** Choose your preferred format:
          - `.AppImage` - Portable, works on any distribution (just double-click)
          - `.deb` - For Debian/Ubuntu (install with `sudo dpkg -i filename.deb`)

          ### ‚ú® Features
          - üîí **100% Private** - All processing happens locally on your device
          - ‚ö° **Multiple Whisper Models** - From tiny (39MB) to large (1.5GB)
          - üéØ **Global Hotkeys** - Fn key or Cmd+Space to start recording
          - üöÄ **Auto-paste** - Transcribed text appears instantly where you need it
          - üéõÔ∏è **System Tray** - Runs quietly in the background
          - üì± **Professional UI** - Native desktop application experience

          ### üîß System Requirements
          - **Windows:** Windows 10 or later
          - **macOS:** macOS 10.14 (Mojave) or later
          - **Linux:** Most modern distributions
          - Microphone access required
          - Internet connection for initial Whisper model download

          ### üìñ Getting Started
          1. Download the installer for your platform
          2. Install/run the application
          3. Grant microphone permissions when prompted
          4. Choose your preferred Whisper model (tiny recommended for speed)
          5. Use the global hotkey to start transcribing!

          **Need Help?** Visit our [GitHub repository](https://github.com/${{ github.repository }}) for documentation and support.

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
